@use "sass:list";
@use "sass:map";
@use "../01-settings/grille";
@use "breakpoints";

// Utilisé pour évaluer les cartes Sass comme nos points de rupture de grille
@use "sass:math";

@mixin _assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;
	@each $key, $num in $map {
		@if $prev-num == null or math.unit($num) == "%" or math.unit($prev-num) == "%" {
			// Do nothing
		} @else if not math.compatible($prev-num, $num) {
			@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		} @else if $prev-num >= $num {
			@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}
		$prev-key: $key;
		$prev-num: $num;
	}
}

// Commence à zéro
// Utilisé pour garantir que la largeur minimale du point d'arrêt le plus bas commence à 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
	@if list.length($map) > 0 {
		$values: map.values($map);
		$first-value: list.nth($values, 1);
		@if $first-value != 0 {
			@warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
		}
	}
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: grille.$grid-gutter-width) {
	width: 100%;
	padding-right: $gutter * 0.5;
	padding-left: $gutter * 0.5;
	margin-right: auto;
	margin-left: auto;
}

@mixin make-row($gutter: grille.$grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: -$gutter * 0.5;
	margin-left: -$gutter * 0.5;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: grille.$container-max-widths, $breakpoints: grille.$grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include breakpoints.media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
	@include deprecate("The `make-container-max-widths` mixin", "v4.5.2", "v5");
}

@mixin make-col-ready($gutter: grille.$grid-gutter-width) {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	padding-right: $gutter * 0.5;
	padding-left: $gutter * 0.5;
}

@mixin make-col($size, $columns: grille.$grid-columns) {
	flex: 0 0 math.percentage(math.div($size, $columns));
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: math.percentage(math.div($size, $columns));
}

@mixin make-col-auto() {
	flex: 0 0 auto;
	width: auto;
	max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: grille.$grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num == 0, 0, math.percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
	> * {
		flex: 0 0 math.div(100%, $count);
		max-width: math.div(100%, $count);
	}
}
